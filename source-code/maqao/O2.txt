Target processor is: 11th generation Intel Core processors based on Tiger Lake microarchitecture (x86_64 architecture).

[MAQAO] Info: No innermost loops in the function _Z5saxpyfRKSt6vectorIfSaIfEES3_RS1_.cold
Section 1: Function: saxpy(float, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> >&)
====================================================================================================================================================================================

Code for this function has been compiled to run on any x86-64 processor (SSE2, 2004). It is not optimized for later processors (AVX etc.).
These loops are supposed to be defined in: /home/gjb/Projects/Code-optimization/source-code/maqao/saxpy.cpp

Section 1.1: Source loop ending at line 11
==========================================

Composition and unrolling
-------------------------
It is composed of the loop 3
and is not unrolled or unrolled with no peel/tail loop.

Section 1.1.1: Binary loop #3
=============================

The loop is defined in /home/gjb/Projects/Code-optimization/source-code/maqao/saxpy.cpp:10-11.

The related source loop is not unrolled or unrolled with no peel/tail loop.
2% of peak computational performance is used (1.67 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))

Type of elements and instruction set
------------------------------------
2 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).


Matching between your loop (in the source code) and the binary loop
-------------------------------------------------------------------
The binary loop is composed of 2 FP arithmetical operations:
 - 1: addition or subtraction
 - 1: multiply
The binary loop is loading 8 bytes (2 single precision FP elements).
The binary loop is storing 4 bytes (1 single precision FP elements).

Arithmetic intensity
--------------------
Arithmetic intensity is 0.17 FP operations per loaded or stored byte.

Unroll opportunity
------------------
Loop body is too small to efficiently use resources.
Workaround(s):
Unroll your loop if trip count is significantly higher than target unroll factor. This can be done manually. Or by recompiling with -funroll-loops and/or -floop-unroll-and-jam. Or with the unroll (resp. unroll_and_jam) directive on top of the inner (resp. surrounding) loop. You can enforce an unroll factor: #pragma GCC unroll N

General properties
------------------
nb instructions    : 7
nb uops            : 6
loop length        : 28
used x86 registers : 5
used mmx registers : 0
used xmm registers : 2
used ymm registers : 0
used zmm registers : 0
nb stack references: 0
ADD-SUB / MUL ratio: 1.00


Front-end
---------
ASSUMED MACRO FUSION
FIT IN UOP CACHE
micro-operation queue: 1.20 cycles
front end            : 1.20 cycles


Back-end
--------
       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9
----------------------------------------------------------------------------
uops   | 1.00 | 1.00 | 1.00 | 1.00 | 0.50 | 1.00 | 1.00 | 0.50 | 0.50 | 0.50
cycles | 1.00 | 1.00 | 1.00 | 1.00 | 0.50 | 1.00 | 1.00 | 0.50 | 0.50 | 0.50

Execution ports to units layout:
 - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT
 - P1 (256 bits): ALU, VPU
 - P2 (512 bits): load
 - P3 (512 bits): load
 - P4 (256 bits): store data
 - P5 (512 bits): ALU, VPU
 - P6: ALU, BRU
 - P7: store address
 - P8: store address
 - P9 (256 bits): store data

Cycles executing div or sqrt instructions: NA
Longest recurrence chain latency (RecMII): 1.00


Cycles summary
--------------
Front-end : 1.20
Dispatch  : 1.00
Data deps.: 1.00
Overall L1: 1.20


Vectorization ratios
--------------------
all     : 0%
load    : 0%
store   : 0%
mul     : 0%
add-sub : 0%
fma     : NA (no fma vectorizable/vectorized instructions)
div/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)
other   : NA (no other vectorizable/vectorized instructions)


Vector efficiency ratios
------------------------
all     : 6%
load    : 6%
store   : 6%
mul     : 6%
add-sub : 6%
fma     : NA (no fma vectorizable/vectorized instructions)
div/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)
other   : NA (no other vectorizable/vectorized instructions)


Cycles and memory resources usage
---------------------------------
Assuming all data fit into the L1 cache, each iteration of the binary loop takes 1.20 cycles. At this rate:
 - 5% of peak load performance is reached (6.67 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))
 - 5% of peak store performance is reached (3.33 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))


Front-end bottlenecks
---------------------
Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).

By removing all these bottlenecks, you can lower the cost of an iteration from 1.20 to 1.00 cycles (1.20x speedup).


ASM code
--------
In the binary file, the address of the loop is: 2908

Instruction                                        | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | Latency | Recip. throughput | Vectorization
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MOVSS (%RCX,%RAX,4),%XMM1                          | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 4-7     | 0.50              | scal (6.3%)
MULSS %XMM0,%XMM1                                  | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | scal (6.3%)
ADDSS (%RDI,%RAX,4),%XMM1                          | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | scal (6.3%)
MOVSS %XMM1,(%RSI,%RAX,4)                          | 1     | 0    | 0    | 0    | 0    | 0.50 | 0    | 0    | 0.50 | 0.50 | 0.50 | 3       | 0.50              | scal (6.3%)
ADD $0x1,%RAX                                      | 1     | 0.25 | 0.25 | 0    | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 1       | 0.25              | N/A
CMP %R8,%RAX                                       | 1     | 0.25 | 0.25 | 0    | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 1       | 0.25              | N/A
JB 2908 <_Z5saxpyfRKSt6vectorIfSaIfEES3_RS1_+0x48> | 1     | 0.50 | 0    | 0    | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0       | 0.50              | N/A



All innermost loops were analyzed.

